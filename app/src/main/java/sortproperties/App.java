/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sortproperties;

import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;

public class App {

    private static String sortProperties(Path path) throws IOException {
        List<String> lines = Files.readAllLines(path);

        Map<String, String> map = new HashMap<>();
        for (String line : lines) {
            String[] arr = line.split("=", 2);
            if (arr.length >= 2 && !map.containsKey(arr[0]))
                map.put(arr[0], arr[1]);
        }

        List<String> keys = map.entrySet().stream().map(Map.Entry<String, String>::getKey).collect(Collectors.toList());
        keys.sort(Comparable::compareTo);

        StringBuilder sb = new StringBuilder();
        for (String key : keys) {
            sb.append(key).append("=").append(map.get(key)).append("\n");
        }

        List<String> sorted = Arrays.stream(sb.toString().split("\n")).collect(Collectors.toList());

        // put in original commented lines
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);
            if (!sorted.contains(line)) {
                sorted.add(i, line);
            }
        }

        String result = String.join("\n", sorted);
        return result;

    }

    public static void main(String[] args) throws IOException {
        try (InputStream is = App.class.getClassLoader().getResourceAsStream("application.properties")) {
            Properties prop = new Properties();
            prop.load(is);

            Path path = Paths.get(prop.getProperty("messages.path"));
            List<Path> allMessages = Files.list(path).filter(p -> p.toString().contains("messages")).collect(Collectors.toList());
            allMessages.forEach(messagesPath -> {
                try {
                    String sorted = sortProperties(messagesPath);
                    try (PrintWriter pw = new PrintWriter(new FileWriter(messagesPath.toString()))) {
                        pw.print(sorted);
                        pw.flush();
                    }
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }
    }
}
